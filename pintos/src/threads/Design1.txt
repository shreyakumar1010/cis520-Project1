
CIS 520 - Programming Project #1

                   
---- GROUP ----

Bristol Miller <bristolnmiller@k-state.edu>
Shreya Kumar <shreyak@k-state.edu>
Corey Vessar <coreyvessar@k-state.edu>

---- PRELIMINARIES ----

>>Sources: 
   https://github.com/tssurya/Pintos_Project/blob/master/pintos/src/threads/fixed-point.h
   https://github.com/casimirn/CIS520/blob/master/cis520/pintos/src/threads/Design1.txt
   https://github.com/Hindol/pintos/blob/master/devices/timer.c
   https://knowledgejunk.net/2011/05/06/avoiding-busy-wait-in-timer_sleep-on-pintos/
   https://github.com/ilyanep/pintos-awesome/blob/master/src/devices/timer.c
   https://github.com/ryantimwilson/Pintos-Project-1/blob/master/src/threads/synch.c
   https://web.stanford.edu/class/cs140/projects/pintos/pintos_1.html#SEC8

>> If you have any preliminary comments on your submission, notes for
>> the TA, or extra credit, please give them here.


                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----
>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

   static struct list sleeperCells
        in timer.c
		We created a static struct list named sleeperCells, which holds the list of 
		sleeping threads. 

   struct thread       
        in thread.h 
   		Added a int to keep track of the time to wakeup. Called time_to_wakeup. 
		Added a list_elem sleeping_element as a timer element (what is put in the list)
		Added a semaphore timer_sem to use as a locking mechanism

   bool lower_wakeuptime(const struct list_elem *A, const struct list_elem *B, void *aux UNUSED) 
   	in thread.h
		prototype description of the function added that compares wakeuptime of two elements

---- ALGORITHMS ----
>> A2: Briefly describe what happens in a call to your timer_sleep(),
>> including the effects of the timer interrupt handler.

   When timer_sleep is called, first the argument is validated by checking that ticks is > 0. 
   Then, it adds the global timer_ticks() to ticks, which is what was passed into the 
   function when timer_sleep was called. This value is then assigned to the current thread's 
   "time_to_wakeup". The handler then disables the interrupts by clearing the interrupt flag. 
   After interrupts have been disabled,timer_sleep adds the current thread to the list of 
   sleeping threads in a FCFS basis. After this, the interrupts are reenabled by the interrupt 
   handler setting the interrupt flag. //FIX END HERE


>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

   We only disabled the interrupts around the critical code. Also, using a list for just the
   sleeping threads means that the handler isn't wasting its time with nonsleeping threads. 
   Furthermore, using an ordered list makes it so that the handler isn't going through the 
   entire list of sleeping threads.


---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?


>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?


---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> other designs that you considered?



             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.


---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?


              ADVANCED SCHEDULER [EXTRA CREDIT]
              =================================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

